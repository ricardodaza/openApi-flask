# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from poc_openapi.web.models.base_model_ import Model
from poc_openapi.web import util


class Rule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, identifier: str=None, name: str=None, organization: str=None, channel: str=None, description: str=None, javascript: str=None):  # noqa: E501
        """Rule - a model defined in Swagger

        :param identifier: The identifier of this Rule.  # noqa: E501
        :type identifier: str
        :param name: The name of this Rule.  # noqa: E501
        :type name: str
        :param organization: The organization of this Rule.  # noqa: E501
        :type organization: str
        :param channel: The channel of this Rule.  # noqa: E501
        :type channel: str
        :param description: The description of this Rule.  # noqa: E501
        :type description: str
        :param javascript: The javascript of this Rule.  # noqa: E501
        :type javascript: str
        """
        self.swagger_types = {
            'identifier': str,
            'name': str,
            'organization': str,
            'channel': str,
            'description': str,
            'javascript': str
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'name': 'name',
            'organization': 'organization',
            'channel': 'channel',
            'description': 'description',
            'javascript': 'javascript'
        }

        self._identifier = identifier
        self._name = name
        self._organization = organization
        self._channel = channel
        self._description = description
        self._javascript = javascript

    @classmethod
    def from_dict(cls, dikt) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rule of this Rule.  # noqa: E501
        :rtype: Rule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self) -> str:
        """Gets the identifier of this Rule.


        :return: The identifier of this Rule.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this Rule.


        :param identifier: The identifier of this Rule.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def name(self) -> str:
        """Gets the name of this Rule.


        :return: The name of this Rule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Rule.


        :param name: The name of this Rule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def organization(self) -> str:
        """Gets the organization of this Rule.


        :return: The organization of this Rule.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization: str):
        """Sets the organization of this Rule.


        :param organization: The organization of this Rule.
        :type organization: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def channel(self) -> str:
        """Gets the channel of this Rule.


        :return: The channel of this Rule.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel: str):
        """Sets the channel of this Rule.


        :param channel: The channel of this Rule.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def description(self) -> str:
        """Gets the description of this Rule.


        :return: The description of this Rule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Rule.


        :param description: The description of this Rule.
        :type description: str
        """

        self._description = description

    @property
    def javascript(self) -> str:
        """Gets the javascript of this Rule.


        :return: The javascript of this Rule.
        :rtype: str
        """
        return self._javascript

    @javascript.setter
    def javascript(self, javascript: str):
        """Sets the javascript of this Rule.


        :param javascript: The javascript of this Rule.
        :type javascript: str
        """
        if javascript is None:
            raise ValueError("Invalid value for `javascript`, must not be `None`")  # noqa: E501

        self._javascript = javascript
